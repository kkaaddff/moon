// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pc生成页面测试 收银台页面生成 1`] = `
Object {
  "/src/pages/cashier/main/actions/cartAction.ts": "import {Command} from '../constant';
import {Dispatch} from 'typings';
import {IAllReducerProps} from '../types';
import {getReducerData} from '@/redux/store';
import api from 'api';
import {extraPathsValue} from '@/redux/util';

export default (dispatch: Dispatch) => {
  let action = {
    commonChange(...param: any) {
      dispatch({
        type: Command.commonChange,
        payload: extraPathsValue(...arguments),
      });
    },

    /**
     * 添加商品
     */
    async add() {},

    /**
     * 删除商品
     */
    async del() {},

    /**
     * 选择优惠券
     */
    async chooseCoupon() {},

    /**
     * 去除选中优惠券
     */
    async delChoosedCoupon() {},
  };
  return action;
};

function getData(): IAllReducerProps {
  return {
    cart: getReducerData('cashierMainCart'),

    content: getReducerData('cashierMainContent'),
  };
}
",
  "/src/pages/cashier/main/actions/contentAction.ts": "import {Command} from '../constant';
import {Dispatch} from 'typings';
import {IAllReducerProps} from '../types';
import {getReducerData} from '@/redux/store';
import api from 'api';
import {extraPathsValue} from '@/redux/util';

export default (dispatch: Dispatch) => {
  let action = {
    commonChange(...param: any) {
      dispatch({
        type: Command.commonChange,
        payload: extraPathsValue(...arguments),
      });
    },

    /**
         * 
              普通条件查询可以走,commonChange
              
         */
    async modifySearchGoods(
      param,
      options: {
        isQuery: boolean;
        isResetPage: boolean;
      } = {isQuery: true, isResetPage: true},
    ) {
      options.isResetPage ? (param.pageNum = 0) : null;
      dispatch({type: Command.modifyRequestGoods, payload: param});
      //修改完直接查询;
      if (options.isQuery) {
        await this.query();
      }
    },

    /**
     * 查询下一页
     */
    async nextPageGoods() {
      let {request} = getData().main;
      request.pageNum = request.pageNum + 1;
      dispatch({type: Command.modifyRequestGoods, payload: request});
      await this.query();
    },

    /**
     * 以当前查询条件查询
     */
    async queryGoods() {
      let {request} = getData().main;
      //TODO 接口缺失
      // let {projectVOPage:{total,list}} = await api.PetGoodsController.list(

      dispatch({
        type: Command.queryResultGoods,
        payload: {
          total: 0,
          list: [],
        },
      });
    },

    /**
         * 
              普通条件查询可以走,commonChange
              
         */
    async modifySearchService(
      param,
      options: {
        isQuery: boolean;
        isResetPage: boolean;
      } = {isQuery: true, isResetPage: true},
    ) {
      options.isResetPage ? (param.pageNum = 0) : null;
      dispatch({type: Command.modifyRequestService, payload: param});
      //修改完直接查询;
      if (options.isQuery) {
        await this.query();
      }
    },

    /**
     * 查询下一页
     */
    async nextPageService() {
      let {request} = getData().main;
      request.pageNum = request.pageNum + 1;
      dispatch({type: Command.modifyRequestService, payload: request});
      await this.query();
    },

    /**
     * 以当前查询条件查询
     */
    async queryService() {
      let {request} = getData().main;
      //TODO 接口缺失
      // let {projectVOPage:{total,list}} = await api.ProjectController.page(

      dispatch({
        type: Command.queryResultService,
        payload: {
          total: 0,
          list: [],
        },
      });
    },

    /**
         * 
              普通条件查询可以走,commonChange
              
         */
    async modifySearchCard(
      param,
      options: {
        isQuery: boolean;
        isResetPage: boolean;
      } = {isQuery: true, isResetPage: true},
    ) {
      options.isResetPage ? (param.pageNum = 0) : null;
      dispatch({type: Command.modifyRequestCard, payload: param});
      //修改完直接查询;
      if (options.isQuery) {
        await this.query();
      }
    },

    /**
     * 查询下一页
     */
    async nextPageCard() {
      let {request} = getData().main;
      request.pageNum = request.pageNum + 1;
      dispatch({type: Command.modifyRequestCard, payload: request});
      await this.query();
    },

    /**
     * 以当前查询条件查询
     */
    async queryCard() {
      let {request} = getData().main;
      //TODO 接口缺失
      // let {projectVOPage:{total,list}} = await api.BossGoodsEvaluateController.page(

      dispatch({
        type: Command.queryResultCard,
        payload: {
          total: 0,
          list: [],
        },
      });
    },

    /**
     * 修改关键字
     */
    async modifyKeyWord() {},
  };
  return action;
};

function getData(): IAllReducerProps {
  return {
    cart: getReducerData('cashierMainCart'),

    content: getReducerData('cashierMainContent'),
  };
}
",
  "/src/pages/cashier/main/actions/index.ts": "import Store from '@/redux/store';
import {Command} from '../constant';
import {Dispatch} from 'typings';
import {getActionProxy} from '@/redux/action-util';
import api from 'api';

import CartAction from './cartAction';

import ContentAction from './contentAction';

export default (dispatch: Dispatch) => {
  const actions = {
    cartAction: getActionProxy<typeof CartAction>(CartAction)(dispatch),

    contentAction: getActionProxy<typeof ContentAction>(ContentAction)(
      dispatch,
    ),

    /**
     * 初始化数据
     */
    async init() {
      dispatch({
        type: Command.init,
        payload: {
          //cart  :{},
          //content  :{},
        },
      });
    },

    /**
     * 重置
     */
    async clean() {
      dispatch({type: Command.clean});
    },
  };

  return {actions};
};
",
  "/src/pages/cashier/main/components/cart-foot.tsx": "import * as React from 'react';

import * as T from '../types';
import './cart-foot.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type ICartFootProps = T.IProps & T.ICartFootProps;

@connect<Partial<ICartFootProps>, T.ICartFootState>(
  store2Props,
  actions,
)
export default class CartFoot extends React.Component<
  Partial<ICartFootProps>,
  T.ICartFootState
> {
  constructor(props: ICartFootProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cartFoot\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/cart-header.tsx": "import * as React from 'react';

import * as T from '../types';
import './cart-header.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type ICartHeaderProps = T.IProps & T.ICartHeaderProps;

@connect<Partial<ICartHeaderProps>, T.ICartHeaderState>(
  store2Props,
  actions,
)
export default class CartHeader extends React.Component<
  Partial<ICartHeaderProps>,
  T.ICartHeaderState
> {
  constructor(props: ICartHeaderProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cartHeader\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/cart-list.tsx": "import * as React from 'react';

import * as T from '../types';
import './cart-list.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type ICartListProps = T.IProps & T.ICartListProps;

@connect<Partial<ICartListProps>, T.ICartListState>(
  store2Props,
  actions,
)
export default class CartList extends React.Component<
  Partial<ICartListProps>,
  T.ICartListState
> {
  constructor(props: ICartListProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cartList\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/cart-summary.tsx": "import * as React from 'react';

import * as T from '../types';
import './cart-summary.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type ICartSummaryProps = T.IProps & T.ICartSummaryProps;

@connect<Partial<ICartSummaryProps>, T.ICartSummaryState>(
  store2Props,
  actions,
)
export default class CartSummary extends React.Component<
  Partial<ICartSummaryProps>,
  T.ICartSummaryState
> {
  constructor(props: ICartSummaryProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cartSummary\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/cart.tsx": "import * as React from 'react';

import * as T from '../types';
import './cart.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type ICartProps = T.IProps & T.ICartProps;

@connect<Partial<ICartProps>, T.ICartState>(
  store2Props,
  actions,
)
export default class Cart extends React.Component<
  Partial<ICartProps>,
  T.ICartState
> {
  constructor(props: ICartProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cart\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-bottom.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-bottom.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentBottomProps = T.IProps & T.IContentBottomProps;

@connect<Partial<IContentBottomProps>, T.IContentBottomState>(
  store2Props,
  actions,
)
export default class ContentBottom extends React.Component<
  Partial<IContentBottomProps>,
  T.IContentBottomState
> {
  constructor(props: IContentBottomProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentBottom\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-search.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-search.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentSearchProps = T.IProps & T.IContentSearchProps;

@connect<Partial<IContentSearchProps>, T.IContentSearchState>(
  store2Props,
  actions,
)
export default class ContentSearch extends React.Component<
  Partial<IContentSearchProps>,
  T.IContentSearchState
> {
  constructor(props: IContentSearchProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentSearch\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-tabs-cards.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-tabs-cards.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentTabsCardsProps = T.IProps & T.IContentTabsCardsProps;

@connect<Partial<IContentTabsCardsProps>, T.IContentTabsCardsState>(
  store2Props,
  actions,
)
export default class ContentTabsCards extends React.Component<
  Partial<IContentTabsCardsProps>,
  T.IContentTabsCardsState
> {
  constructor(props: IContentTabsCardsProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentTabsCards\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-tabs-goods.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-tabs-goods.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentTabsGoodsProps = T.IProps & T.IContentTabsGoodsProps;

@connect<Partial<IContentTabsGoodsProps>, T.IContentTabsGoodsState>(
  store2Props,
  actions,
)
export default class ContentTabsGoods extends React.Component<
  Partial<IContentTabsGoodsProps>,
  T.IContentTabsGoodsState
> {
  constructor(props: IContentTabsGoodsProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentTabsGoods\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-tabs-service.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-tabs-service.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentTabsServiceProps = T.IProps & T.IContentTabsServiceProps;

@connect<Partial<IContentTabsServiceProps>, T.IContentTabsServiceState>(
  store2Props,
  actions,
)
export default class ContentTabsService extends React.Component<
  Partial<IContentTabsServiceProps>,
  T.IContentTabsServiceState
> {
  constructor(props: IContentTabsServiceProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentTabsService\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content-tabs.tsx": "import * as React from 'react';

import * as T from '../types';
import './content-tabs.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentTabsProps = T.IProps & T.IContentTabsProps;

@connect<Partial<IContentTabsProps>, T.IContentTabsState>(
  store2Props,
  actions,
)
export default class ContentTabs extends React.Component<
  Partial<IContentTabsProps>,
  T.IContentTabsState
> {
  constructor(props: IContentTabsProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"contentTabs\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/components/content.tsx": "import * as React from 'react';

import * as T from '../types';
import './content.less';
import actions from '../actions/index';
import {connect} from 'react-redux';
import {store2Props} from '../selectors';

type IContentProps = T.IProps & T.IContentProps;

@connect<Partial<IContentProps>, T.IContentState>(
  store2Props,
  actions,
)
export default class Content extends React.Component<
  Partial<IContentProps>,
  T.IContentState
> {
  constructor(props: IContentProps) {
    super(props);
  }

  /**
    
*/
  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"content\\">
        <div />
      </div>
    );
  }
}
",
  "/src/pages/cashier/main/constant.ts": "export const BASE = 'CashierMain_';

export enum Command {
  //通用修改数据方法
  commonChange = 'CashierMain_commonChange',
  init = 'CashierMain_INIT',
  clean = 'CashierMain_CLEAN',

  /*
        添加商品
    */
  add = 'CashierMain_add',

  /*
        删除商品
    */
  del = 'CashierMain_del',

  /*
        选择优惠券
    */
  chooseCoupon = 'CashierMain_chooseCoupon',

  /*
        去除选中优惠券
    */
  delChoosedCoupon = 'CashierMain_delChoosedCoupon',

  /*
        修改查询条件数据
    */
  modifyRequestGoods = 'CashierMain_modifyRequestGoods',

  /*
        清空查询结果
    */
  cleanListGoods = 'CashierMain_cleanListGoods',

  /*
        
    */
  queryResultGoods = 'CashierMain_queryResultGoods',

  /*
        修改查询条件数据
    */
  modifyRequestService = 'CashierMain_modifyRequestService',

  /*
        清空查询结果
    */
  cleanListService = 'CashierMain_cleanListService',

  /*
        
    */
  queryResultService = 'CashierMain_queryResultService',

  /*
        修改查询条件数据
    */
  modifyRequestCard = 'CashierMain_modifyRequestCard',

  /*
        清空查询结果
    */
  cleanListCard = 'CashierMain_cleanListCard',

  /*
        
    */
  queryResultCard = 'CashierMain_queryResultCard',
}
",
  "/src/pages/cashier/main/index.less": "@import \\"~style/theme.less\\";

.cashierMain {
}
",
  "/src/pages/cashier/main/index.tsx": "import * as React from 'react';
import {connect} from 'react-redux';
import './index.less';
import * as T from './types';
import actions from './actions';
import {store2Props} from './selectors';
import {registerReducer} from '@/redux/store';

import Cart from './components/cart';

import CartHeader from './components/cart-header';

import CartList from './components/cart-list';

import CartFoot from './components/cart-foot';

import CartSummary from './components/cart-summary';

import Content from './components/content';

import ContentSearch from './components/content-search';

import ContentTabs from './components/content-tabs';

import ContentTabsService from './components/content-tabs-service';

import ContentTabsGoods from './components/content-tabs-goods';

import ContentTabsCards from './components/content-tabs-cards';

import ContentBottom from './components/content-bottom';

@connect<Partial<T.IProps>, any>(
  store2Props,
  actions,
)
export default class CashierMain extends React.Component<
  Partial<T.IProps>,
  any
> {
  componentDidMount() {
    this.props.actions.init();
  }

  componentWillUnmount() {
    this.props.actions.clean();
  }

  render() {
    let {
      actions: {
        cartAction,

        contentAction,
      },
      cart,

      content,
    } = this.props;

    return (
      <div className=\\"cashierMain\\">
        <div />
      </div>
    );
  }
}

//==动态注入reducer===

import cashierMainCart from './reducers/cart';

import cashierMainContent from './reducers/content';

registerReducer({cashierMainCart});

registerReducer({cashierMainContent});
",
  "/src/pages/cashier/main/reducers/cart.ts": "import {Command} from '../constant';
import _ from 'lodash';
import {ICartReducer} from '../types';
import {Action} from 'typings';
import produce from 'immer';
import * as immerUtil from '@/redux/immer-util';

const INITIAL_STATE: ICartReducer = {
  isReady: false,

  list: '',

  customer: '',

  coupons: '',

  coupon2Use: '',
};

export default function cart(
  state = INITIAL_STATE,
  action: Action,
): ICartReducer {
  const {type, payload} = action;

  return produce<ICartReducer>(state, draftState => {
    switch (type) {
      //通用改变数据
      case Command.commonChange:
        return immerUtil.commonChange(draftState, {...payload, key: 'cart'});

      //添加商品
      case Command.add:
        return draftState;

      //删除商品
      case Command.del:
        return draftState;

      //选择优惠券
      case Command.chooseCoupon:
        return draftState;

      //去除选中优惠券
      case Command.delChoosedCoupon:
        return draftState;

      //初始化
      case Command.init:
        draftState.isReady = true;
        for (let propKey in payload.cart) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] = payload.cart[propKey];
        }
        return draftState;

      //重置
      case Command.clean:
        for (let propKey in INITIAL_STATE) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] = INITIAL_STATE[propKey];
        }
        return draftState;
    }
  });
}
",
  "/src/pages/cashier/main/reducers/content.ts": "import {Command} from '../constant';
import _ from 'lodash';
import {IContentReducer} from '../types';
import {Action} from 'typings';
import produce from 'immer';
import * as immerUtil from '@/redux/immer-util';

const INITIAL_STATE: IContentReducer = {
  isReady: false,

  type: 0,

  requestGoods: {q: '', pageNum: 0, pageSize: 10},

  totalGoods: 0,

  listGoods: [{}],

  requestService: {q: '', pageNum: 0, pageSize: 10},

  totalService: 0,

  listService: [{}],

  requestCard: {q: '', pageNum: 0, pageSize: 10},

  totalCard: 0,

  listCard: [{}],

  goodsCates: [],

  serviceCates: [],
};

export default function content(
  state = INITIAL_STATE,
  action: Action,
): IContentReducer {
  const {type, payload} = action;

  return produce<IContentReducer>(state, draftState => {
    switch (type) {
      //通用改变数据
      case Command.commonChange:
        return immerUtil.commonChange(draftState, {...payload, key: 'content'});

      //修改查询条件数据
      case Command.modifyRequestGoods:
        immerUtil.assign(draftState.request, payload);
        return draftState;

      //清空查询结果
      case Command.cleanListGoods:
        draftState.list = [];
        return draftState;

      //
      case Command.queryResultGoods:
        draftState.list = payload.list;
        draftState.total = payload.total;

        return draftState;

      //修改查询条件数据
      case Command.modifyRequestService:
        immerUtil.assign(draftState.request, payload);
        return draftState;

      //清空查询结果
      case Command.cleanListService:
        draftState.list = [];
        return draftState;

      //
      case Command.queryResultService:
        draftState.list = payload.list;
        draftState.total = payload.total;

        return draftState;

      //修改查询条件数据
      case Command.modifyRequestCard:
        immerUtil.assign(draftState.request, payload);
        return draftState;

      //清空查询结果
      case Command.cleanListCard:
        draftState.list = [];
        return draftState;

      //
      case Command.queryResultCard:
        draftState.list = payload.list;
        draftState.total = payload.total;

        return draftState;

      //初始化
      case Command.init:
        draftState.isReady = true;
        for (let propKey in payload.content) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] = payload.content[propKey];
        }
        return draftState;

      //重置
      case Command.clean:
        for (let propKey in INITIAL_STATE) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] = INITIAL_STATE[propKey];
        }
        return draftState;
    }
  });
}
",
  "/src/pages/cashier/main/selectors.ts": "import {createSelector} from 'reselect';
import {IAllReducerProps} from './types';

export function store2Props({
  cashierMainCart,

  cashierMainContent,
}: any): IAllReducerProps {
  return {
    cart: cashierMainCart,

    content: cashierMainContent,
  };
}

//衍生数据使用请参考:  https://github.com/reduxjs/reselect
",
  "/src/pages/cashier/main/types.ts": "import Actions from './actions';
import {GoodsVO2} from 'api/PetGoodsController';
import {ProjectVO} from 'api/ProjectController';
import {GoodsEvaluateVO3} from 'api/BossGoodsEvaluateController';
import {StoreCateResponseVOArray} from 'api/StoreCateController';
import {ProjectCatePageVO} from 'api/StoreProjectCateController';

export interface ICartReducer {
  isReady: boolean;
  isLoading?: boolean;

  list: ICartList;

  customer: ICartCustomer;

  coupons: ICartCoupons;

  coupon2Use: ICartCoupon2Use;
}

export interface IContentReducer {
  isReady: boolean;
  isLoading?: boolean;

  type: IContentType;

  requestGoods: IContentRequestGoods;

  totalGoods: IContentTotalGoods;

  listGoods: GoodsVO2[];

  requestService: IContentRequestService;

  totalService: IContentTotalService;

  listService: ProjectVO[];

  requestCard: IContentRequestCard;

  totalCard: IContentTotalCard;

  listCard: GoodsEvaluateVO3[];

  goodsCates: StoreCateResponseVOArray;

  serviceCates: ProjectCatePageVO[];
}

export type ActionType = ReturnType<typeof Actions>;
export type IAllReducerProps = {
  cart: ICartReducer;

  content: IContentReducer;

  [name: string]: any;
};

//默认是全部的属性,可以自定义
export type IProps = IAllReducerProps & ActionType;

export type ICartProps = {};
export type ICartState = {};

export type ICartHeaderProps = {};
export type ICartHeaderState = {};

export type ICartListProps = {};
export type ICartListState = {};

export type ICartFootProps = {};
export type ICartFootState = {};

export type ICartSummaryProps = {};
export type ICartSummaryState = {};

export type IContentProps = {};
export type IContentState = {};

export type IContentSearchProps = {};
export type IContentSearchState = {};

export type IContentTabsProps = {};
export type IContentTabsState = {};

export type IContentTabsServiceProps = {};
export type IContentTabsServiceState = {};

export type IContentTabsGoodsProps = {};
export type IContentTabsGoodsState = {};

export type IContentTabsCardsProps = {};
export type IContentTabsCardsState = {};

export type IContentBottomProps = {};
export type IContentBottomState = {};

export type ICartList = string;
export type ICartCustomer = string;
export type ICartCoupons = string;
export type ICartCoupon2Use = string;
export type IContentType = number;
export interface IContentRequestGoods {
  q?: string;
  pageNum?: number;
  pageSize?: number;
  [k: string]: any;
}
export type IContentTotalGoods = number;
export interface IContentRequestService {
  q?: string;
  pageNum?: number;
  pageSize?: number;
  [k: string]: any;
}
export type IContentTotalService = number;
export interface IContentRequestCard {
  q?: string;
  pageNum?: number;
  pageSize?: number;
  [k: string]: any;
}
export type IContentTotalCard = number;
",
}
`;
