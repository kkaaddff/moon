import Store from '@/redux/store';
import {Command} from '../constant';
import {Dispatch} from "typings";
import {getActionProxy} from "@/redux/action-util";
import api from 'api';
import * as reduxStore from "@/redux/store";

<% pageInfo.actions.forEach(action=>{ %>
import <%=Util.toUCamelize(action.fileName) %> from './<%=action.fileName%>'
<% }) %>

 <% pageInfo.actors.forEach(actor=>{ %>
import <%=Util.toLCamelize(pageInfo.pageKey+"-"+actor.fileName)%> from '../reducers/<%=actor.fileName%>';
 <% }) %>
export default (dispatch:Dispatch) => {
  const actions = {

    <% pageInfo.actions.forEach(action=>{ %>
        <%=Util.toLCamelize(action.fileName) %> :getActionProxy<typeof <%=Util.toUCamelize(action.fileName) %>>(<%=Util.toUCamelize(action.fileName) %>)(dispatch),
    <% }) %>
    /**
     * 初始化数据
     */
    async init(<%- pageInfo.lifeCycles && pageInfo.lifeCycles.param%>) {

    <% if (pageInfo.lifeCycles && pageInfo.lifeCycles.content) { %>
      <%-pageInfo.lifeCycles.content %>
    <% } %>

      dispatch({type: Command.init,payload:{
            <% pageInfo.actors.forEach(actor=>{ %>
                         //<%=Util.toLCamelize(actor.fileName)%>  :{},
              <% }) %>
      }});
    },

    /**
     * 动态添加注入reducer
     */
    async loadReducer(){
    reduxStore.registerReducer({
         <% pageInfo.actors.forEach(actor=>{ %>
            <%=Util.toLCamelize(pageInfo.pageKey+"-"+actor.fileName)%>,
         <% }) %>
         })
    },

    /**
     * 卸载reducer
     */
    async unloadReducer(){
         if(reduxStore.deregister) {
         reduxStore.deregister([
                 <% pageInfo.actors.forEach(actor=>{ %>
                      "<%=Util.toLCamelize(pageInfo.pageKey+"-"+actor.fileName)%>",
                 <% }) %>
                 ])
         } else {
           console.error('请在redux/store中实现deregister逻辑. ');
         }
    },

    /**
     * 重置
     */
    async clean() {
      dispatch({type: Command.clean});
    },
  };

  return {actions};
};
